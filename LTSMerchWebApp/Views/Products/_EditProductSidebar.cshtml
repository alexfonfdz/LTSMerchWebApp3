@model LTSMerchWebApp.Models.Product
<!-- Modal de confirmación de producto editado -->
<div id="productEditModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h5>Editar</h5>
        </div>
        <div class="modal-body">
            <i class="fa-solid fa-circle-check icon-large" style="color: #000000;"></i>
            <div class="modal-text">
                <h2>Producto editado</h2>
                <p>Producto editado correctamente</p>
            </div>
            <div class="sidebar-footer">
                <button onclick="closeEditModalAndReload()">ACEPTAR</button>
            </div>
        </div>
    </div>
</div>

<!-- Sidebar de Editar Producto -->
<div id="editProductSidebar" class="sidebar">
    <div class="sidebar-header">
        <h5>EDITAR</h5>
        <button type="button" class="close-btn" onclick="closeEditSidebar()">×</button>
    </div>
    <div class="sidebar-content">
        <form id="editProductForm" asp-action="Edit" enctype="multipart/form-data">
            <input type="hidden" name="ProductId" />
            <div class="form-group">
                <h5 id="productNameDisplay"></h5>
                <input type="hidden" name="Name" class="form-control" id="productName" asp-for="Name" maxlength="100">
            </div>
            <div class="form-group">
                <label for="productPrice">Precio unitario</label>
                <input type="number" name="Price" min="0.01" max="999999.99" step="0.01" class="form-control" id="productPrice" asp-for="Price">
            </div>
            <div class="form-group">
                <label for="productDescription">Descripción</label>
                <textarea class="form-control" name="Description" id="productDescription" rows="3" asp-for="Description" maxlength="300"></textarea>
            </div>

 <!-- Combinaciones de Categoría, Color y Talla -->
            <div class="form-group">
                <div id="editCombinationContainer">
                    <!-- Aquí se agregarán dinámicamente las combinaciones cargadas en el JavaScript -->
                </div>
                <button type="button" onclick="addEditCombination()">Agregar otra combinación</button>
            </div>


            <div class="form-group">
                <label for="productStock">Stock</label>
                <input type="number" name="Stock" class="form-control" min="0" max="999999" asp-for="Stock">
            </div>

            <div class="form-group">
                <label for="productState">Estado</label>
                <select class="form-control" name="StateId" asp-items="ViewBag.States">
                    <option value="">Seleccione el estado</option>
                </select>
            </div>

            <div class="form-group file-upload-wrapper">
                <label for="file-upload-edit">Imagen</label>
                <div class="file-upload-controls">
                    <label class="file-upload-btn" for="file-upload-edit">Subir imagen</label>
                    <input id="file-upload-edit" type="file" class="form-control-file" asp-for="ImageUrl" accept=".jpg, .jpeg, .png" onchange="validateEditImage(this)">
                    <span id="file-upload-edit-name" class="file-upload-name">No hay archivo seleccionado</span>
                </div>
                <small class="form-text text-muted">* La imagen debe tener 300x300px como mínimo de resolución y estar en formato .jpg o .png.</small>
            </div>

            <div class="sidebar-footer">
                <button id="editProductBtn" type="submit" class="btn btn-primary">Guardar cambios</button>
            </div>
        </form>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
   function addEditCombination() {
    const combinationContainer = document.getElementById("editCombinationContainer");
    const newCombination = document.createElement("div");
    newCombination.className = "combination-row";
    newCombination.innerHTML = `
        <label for="productCategory">Categoría</label>
        <select class="form-control category-select" name="CategoryIds">
            @foreach (var category in (SelectList)ViewBag.Categories) {
                <option value="@category.Value">@category.Text</option>
            }
        </select>

        <label for="productColor">Color</label>
        <select class="form-control color-select" name="ColorIds">
            @foreach (var color in (SelectList)ViewBag.Colors) {
                <option value="@color.Value">@color.Text</option>
            }
        </select>

        <label for="productSize">Talla</label>
        <select class="form-control size-select" name="SizeIds">
            @foreach (var size in (SelectList)ViewBag.Sizes) {
                <option value="@size.Value">@size.Text</option>
            }
        </select>
        <hr/>
    `;

    // Añadir la nueva combinación al contenedor
    combinationContainer.appendChild(newCombination);

    // Agregar el evento `input` a cada select de la nueva combinación para activar el botón cuando se modifique
    newCombination.querySelectorAll('select').forEach((select) => {
        select.addEventListener('change', checkEditFormValidity);
    });

    // Llamar a `checkEditFormValidity` para actualizar el estado del botón
    checkEditFormValidity();
}

  let isImageValid = true; // Variable para verificar la validez de la imagen

function validateEditImage(input) {
    const file = input.files[0];
    const allowedExtensions = ['jpg', 'jpeg', 'png'];
    isImageValid = true; // Reiniciar el estado de validación de la imagen

    if (file) {
        const fileExt = file.name.split('.').pop().toLowerCase();
        if (!allowedExtensions.includes(fileExt)) {
            input.value = ''; // Limpiar el valor del input de archivo
            document.getElementById('file-upload-edit-name').textContent = 'Imagen inválida (Formato no permitido)';
            isImageValid = false; // Imagen no válida
            checkEditFormValidity(); // Actualizar estado del botón
            return;
        }

        const reader = new FileReader();
        reader.onload = function (e) {
            const img = new Image();
            img.onload = function () {
                if (img.width < 300 || img.height < 300) {
                    input.value = ''; // Limpiar el valor del input de archivo
                    document.getElementById('file-upload-edit-name').textContent = 'Imagen inválida';
                    isImageValid = false; // Imagen no válida
                } else {
                    document.getElementById('file-upload-edit-name').textContent = file.name; // Mostrar nombre del archivo
                    isImageValid = true; // Imagen válida
                }
                checkEditFormValidity(); // Actualizar estado del botón
            };
            img.src = e.target.result;
        };
        reader.readAsDataURL(file);
    } else {
        document.getElementById('file-upload-edit-name').textContent = 'No hay archivo seleccionado';
        isImageValid = false; // Imagen no válida si no hay archivo seleccionado
        checkEditFormValidity(); // Actualizar estado del botón
    }
}

    function checkEditFormValidity() {
    const form = document.getElementById('editProductForm');
    const submitBtn = document.getElementById('editProductBtn');
     submitBtn.disabled = !(form.checkValidity() && isImageValid); // Activar si el formulario es válido
}

// Escuchar cambios en los campos del formulario para verificar la validez
document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('editProductForm');

    // Agregar el evento `input` a cada campo para activar el botón cuando cualquier campo cambie
    form.querySelectorAll('input, textarea, select').forEach((input) => {
        input.addEventListener('input', checkEditFormValidity);
    });

    // Verificar la validez al cargar la página por primera vez
    checkEditFormValidity();
});

    function openEditModal() {
        $('#productEditModal').fadeIn();
    }

    function closeEditModalAndReload() {
        $('#productEditModal').fadeOut(function () {
            location.reload();
        });
    }

    function closeEditSidebar() {
        $('#editProductSidebar').removeClass('sidebar-open');
    }

    function resetEditForm() {
        const form = document.getElementById('editProductForm');
        form.reset();
        document.getElementById('file-upload-edit-name').textContent = 'No hay archivo seleccionado';
        document.getElementById('editProductBtn').disabled = true;
    }

       function openEditSidebar(productId) {
    $.ajax({
        url: '/Products/Edit/' + productId,
        method: 'GET',
        success: function (product) {
            console.log(product); // Verificar en consola que `imageUrl` y otros datos estén presentes
            resetEditForm();

            // Asignar valores a los campos del formulario
            $('#editProductForm input[name="ProductId"]').val(product.productId);
            $('#productNameDisplay').text(product.name);
            $('#editProductForm input[name="Name"]').val(product.name);
            $('#editProductForm input[name="Price"]').val(product.price);
            $('#editProductForm textarea[name="Description"]').val(product.description);
            $('#editProductForm input[name="Stock"]').val(product.stock);
            if (product.stateId !== null) {
                $('#editProductForm select[name="StateId"]').val(product.stateId);
            }

            // Cargar combinaciones de opciones
            const combinationContainer = document.getElementById("editCombinationContainer");
            combinationContainer.innerHTML = ''; // Limpiar el contenedor antes de agregar las combinaciones

            product.productOptions.forEach(option => {
                const combinationRow = document.createElement("div");
                combinationRow.className = "combination-row";
                combinationRow.innerHTML = `
                    <label for="productCategory">Categoría</label>
                    <select class="form-control category-select" name="CategoryIds">
                        @foreach (var category in (SelectList)ViewBag.Categories) {
                            <option value="@category.Value">@category.Text</option>
                        }
                    </select>

                    <label for="productColor">Color</label>
                    <select class="form-control color-select" name="ColorIds">
                        @foreach (var color in (SelectList)ViewBag.Colors) {
                            <option value="@color.Value">@color.Text</option>
                        }
                    </select>

                    <label for="productSize">Talla</label>
                    <select class="form-control size-select" name="SizeIds">
                        @foreach (var size in (SelectList)ViewBag.Sizes) {
                            <option value="@size.Value">@size.Text</option>
                        }
                    </select>
                    <hr/>
                `;
                combinationContainer.appendChild(combinationRow);
                
                // Asignar valores seleccionados en las opciones
                combinationRow.querySelector('.category-select').value = option.categoryId;
                combinationRow.querySelector('.color-select').value = option.colorId;
                combinationRow.querySelector('.size-select').value = option.sizeId;
            });

            // Asignar la URL de la imagen si está disponible
            if (product.imageUrl) {
                $('#file-upload-edit-name').text(product.imageUrl.split('/').pop()); // Mostrar el nombre del archivo
                $('#file-preview').attr('src', '/img/' + product.imageUrl).show(); // Mostrar la imagen
            } else {
                $('#file-upload-edit-name').text('No hay archivo seleccionado');
                $('#file-preview').hide(); // Ocultar vista previa si no hay imagen
            }

            $('#editProductSidebar').addClass('sidebar-open');
        },
        error: function (error) {
            console.log('Error al cargar el producto:', error);
        }
    });
}

   $('#editProductForm').on('submit', function (event) {
    event.preventDefault();

    const formData = new FormData(this);
    const productId = $('#editProductForm input[name="ProductId"]').val();

    $.ajax({
        url: '/Products/Edit/' + productId,
        type: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        success: function (response) {
            if (response.success) {
                closeEditSidebar();
                openEditModal();

                // Unir categorías, colores y tallas en un solo string
                const categories = response.categories.join(', ');
                const colors = response.colors.join(', ');
                const sizes = response.sizes.join(', ');

                // Actualizar la fila de la tabla con los datos recibidos
                let updatedRow = `
                    <tr data-product-id="${response.productId}">
                        <td>${response.productId}</td>
                        <td><img src="/img/${response.imageUrl}" alt="${response.name}" class="img-fluid"><A/td>
                        <td>${response.name}</td>
                        <td>${response.description}</td>
                        <td>${categories}</td>
                        <td>${colors}</td>
                        <td>${sizes}</td>
                        <td>${response.stock}</td>
                        <td>${response.price}</td>
                        <td>${response.state}</td>
                        <td class="action-icons">
                            <a href="javascript:void(0);" onclick="openEditSidebar(${response.productId})"><i class="fa fa-edit"></i></a>
                            <a href="/Products/Delete/${response.productId}"><i class="fa fa-trash"></i></a>
                        </td>
                    </tr>
                `;
                $('tr[data-product-id="' + productId + '"]').replaceWith(updatedRow);
            } else {
                console.log('Error: ' + response.message);
            }
        },
        error: function (xhr, status, error) {
            console.log('Error al editar el producto:', error);
        }
    });
});
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
